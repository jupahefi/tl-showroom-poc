#!/bin/bash

set -e  # ‚õî Detener ejecuci√≥n si hay error

# üìå Instalar `gh` si no est√° presente
if ! command -v gh &>/dev/null; then
    echo "üîπ Instalando GitHub CLI..."
    sudo apt update && sudo apt install -y gh
fi

# üîê Autenticaci√≥n con GitHub (HTTPS)
if ! gh auth status &>/dev/null; then
    echo "üîë Autenticando con GitHub..."
    gh auth login
else
    echo "‚úÖ Ya est√°s autenticado en GitHub."
fi

# üìå Configurar Git para usar HTTPS en lugar de SSH
git config --global url."https://github.com/".insteadOf "git@github.com:"

# üìå Datos de usuario y repos
GITHUB_USER="jupahefi"
BACKEND_REPO="tl-showroom-backend-poc"
FRONTEND_REPO="tl-showroom-frontend-poc"

# üîë URLs HTTPS en lugar de SSH
BACKEND_REPO_URL="https://github.com/$GITHUB_USER/$BACKEND_REPO.git"
FRONTEND_REPO_URL="https://github.com/$GITHUB_USER/$FRONTEND_REPO.git"

# üöÄ Funci√≥n para crear el repo en GitHub si no existe
create_github_repo() {
    local repo_name="$1"
    echo "üîç Verificando si el repositorio $repo_name existe en GitHub..."

    if ! gh repo view "$GITHUB_USER/$repo_name" &>/dev/null; then
        echo "‚ö†Ô∏è El repositorio no existe. Cre√°ndolo en GitHub..."
        gh repo create "$GITHUB_USER/$repo_name" --private --confirm
    else
        echo "‚úÖ El repositorio $repo_name ya existe en GitHub."
    fi
}

# üöÄ Funci√≥n para inicializar y sincronizar un repositorio
init_repo() {
    local repo_path="$1"
    local repo_url="$2"
    local repo_name="$3"

    create_github_repo "$repo_name"

    echo "üìÇ Navegando a $repo_path..."
    cd "$repo_path"

    if [ ! -d ".git" ]; then
        echo "üõ†Ô∏è Inicializando repositorio Git..."
        git init
        git remote add origin "$repo_url"
    else
        echo "üîÑ Repositorio ya inicializado. Verificando conexi√≥n con remote..."
        if ! git remote -v | grep -q "$repo_url"; then
            echo "‚ö†Ô∏è Remote no configurado correctamente. Ajust√°ndolo..."
            git remote set-url origin "$repo_url"
        fi
    fi

    # üõ†Ô∏è Verifica y corrige problemas en Git antes de continuar
    echo "üîÑ Verificando estado del repositorio..."

    # 1Ô∏è‚É£ Cancela rebase pendiente si existe
    if git status | grep -q "rebase in progress"; then
        echo "‚ö†Ô∏è Rebase detectado. Abortando..."
        git rebase --abort
    fi

    # 2Ô∏è‚É£ Asegura que estamos en la rama `main`
    if ! git rev-parse --verify main &>/dev/null; then
        echo "‚ö†Ô∏è Rama 'main' no encontrada. Cre√°ndola..."
        git checkout -b main
    else
        git checkout main
    fi

    # 3Ô∏è‚É£ Resolver conflictos en deploy.yml si existen (IGNORANDO Initial commit)
    if git status | grep -q ".github/workflows/deploy.yml"; then
        echo "‚ö†Ô∏è Conflicto detectado en deploy.yml, resolviendo autom√°ticamente..."
        git checkout --theirs .github/workflows/deploy.yml
        git add .github/workflows/deploy.yml
        git rebase --continue || git rebase --abort
    fi

    # 4Ô∏è‚É£ Resetea si hay inconsistencias y forzar el pull ignorando `Initial commit`
    if git status | grep -q "Initial commit"; then
        echo "‚ö†Ô∏è Detectado conflicto de 'Initial commit'. Forzando pull..."
        git fetch origin main
        git reset --hard origin/main
    else
        echo "üîÑ Sincronizando con el remoto..."
        #git pull --rebase origin main || echo "‚ö†Ô∏è No se pudo hacer pull, continuando..."
	git rebase --continue
    fi

    echo "üì¶ Agregando archivos y haciendo commit..."
    git add .
    git commit -m "Sync repo" || echo "‚ö†Ô∏è No hay cambios para commitear"

    echo "üöÄ Subiendo cambios a GitHub..."
    git push -u origin main || echo "‚ö†Ô∏è No se pudo hacer push, revisar conflictos."
}

# üèóÔ∏è Crear repos y subir c√≥digo de manera flexible
init_repo "/opt/easyengine/sites/tl-showroom.equalitech.xyz/app/backend" "$BACKEND_REPO_URL" "$BACKEND_REPO"
init_repo "/opt/frontend/showroom-frontend" "$FRONTEND_REPO_URL" "$FRONTEND_REPO"

echo "üéâ Repositorios creados y sincronizados con GitHub."
